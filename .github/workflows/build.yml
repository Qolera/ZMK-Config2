name: ZMK Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake ninja-build gperf \
            ccache dfu-util device-tree-compiler \
            python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \
            make gcc gcc-multilib g++-multilib libsdl2-dev
          
          # Instalar West con las dependencias correctas
          pip3 install --user -U west
          pip3 install --user -U pyelftools
          
      - name: Clean workspace
        run: |
          rm -rf zmk build .west
          
      - name: Initialize West with ZMK fork
        run: |
          # Inicializar directamente con el fork de cdc-mkb
          west init -l config
          
      - name: Update West modules
        run: |
          # Actualizar todos los módulos
          west update
          
      - name: Export Zephyr
        run: |
          west zephyr-export
          pip3 install --user -r zmk/zephyr/scripts/requirements.txt
          
      - name: Setup Zephyr SDK
        run: |
          # Descargar e instalar Zephyr SDK
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.1/zephyr-sdk-0.16.1_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.16.1_linux-x86_64_minimal.tar.xz
          ./zephyr-sdk-0.16.1/setup.sh -t arm-zephyr-eabi -h -c
          
      - name: Copy custom PIM447 files
        run: |
          echo "=== Copiando archivos PIM447 personalizados ==="
          
          # Crear estructura de directorios necesaria
          mkdir -p zmk/app/dts/bindings/sensor
          mkdir -p zmk/app/include/dt-bindings/zmk
          mkdir -p zmk/app/drivers/sensor/pim447_trackball
          mkdir -p zmk/app/src/behaviors
          mkdir -p zmk/app/include/zmk
          
          # Copiar binding YAML
          cp config/pimoroni,pim447_trackball.yaml zmk/app/dts/bindings/sensor/
          
          # Crear archivos mínimos necesarios si no existen en el fork
          
          # 1. Header file para las constantes
          if [ ! -f zmk/app/include/dt-bindings/zmk/pim447_trackball.h ]; then
            cat > zmk/app/include/dt-bindings/zmk/pim447_trackball.h << 'EOF'
#ifndef ZMK_PIM447_TRACKBALL_H
#define ZMK_PIM447_TRACKBALL_H

#define PIM447_MOVE 0
#define PIM447_SCROLL 1

#endif
EOF
          fi
          
          # 2. Driver básico del sensor (placeholder)
          if [ ! -f zmk/app/drivers/sensor/pim447_trackball/Kconfig ]; then
            cat > zmk/app/drivers/sensor/pim447_trackball/Kconfig << 'EOF'
config PIM447_TRACKBALL
    bool "Pimoroni PIM447 Trackball"
    depends on I2C
    help
      Enable driver for Pimoroni PIM447 I2C trackball
EOF
          fi
          
          if [ ! -f zmk/app/drivers/sensor/pim447_trackball/CMakeLists.txt ]; then
            cat > zmk/app/drivers/sensor/pim447_trackball/CMakeLists.txt << 'EOF'
zephyr_library_sources_ifdef(CONFIG_PIM447_TRACKBALL pim447_trackball.c)
EOF
          fi
          
          echo "✅ Archivos PIM447 preparados"
          
      - name: Verify structure
        run: |
          echo "=== Verificando estructura de ZMK ==="
          ls -la zmk/
          ls -la zmk/app/ || true
          ls -la zmk/zephyr/ || true
          echo "=== Verificando ZEPHYR_BASE ==="
          echo "ZEPHYR_BASE=${ZEPHYR_BASE:-not set}"
          
      - name: Build LEFT split
        run: |
          export ZEPHYR_BASE=$PWD/zmk/zephyr
          export ZEPHYR_SDK_INSTALL_DIR=$PWD/zephyr-sdk-0.16.1
          
          # Construir lado izquierdo con PIM447
          west build -s zmk/app -b nice_nano_v2 -d build/left -- \
            -DSHIELD=sofle_left \
            -DZMK_CONFIG="${PWD}/config" \
            -DCONFIG_ZMK_MOUSE=y \
            -DCONFIG_I2C=y
          
      - name: Build RIGHT split
        run: |
          export ZEPHYR_BASE=$PWD/zmk/zephyr
          export ZEPHYR_SDK_INSTALL_DIR=$PWD/zephyr-sdk-0.16.1
          
          # Limpiar build anterior
          rm -rf build/right
          
          # Construir lado derecho
          west build -s zmk/app -b nice_nano_v2 -d build/right -- \
            -DSHIELD=sofle_right \
            -DZMK_CONFIG="${PWD}/config"
          
      - name: Verify builds
        run: |
          echo "=== Verificando firmware generado ==="
          ls -lh build/left/zephyr/zmk.uf2 || echo "❌ Firmware LEFT no encontrado"
          ls -lh build/right/zephyr/zmk.uf2 || echo "❌ Firmware RIGHT no encontrado"
          
          # Verificar si PIM447 está en el DTS
          if [ -f build/left/zephyr/zephyr.dts ]; then
            echo "=== Buscando PIM447 en DTS ==="
            grep -i "pim447_trackball\|pimoroni,pim447_trackball" build/left/zephyr/zephyr.dts || echo "⚠️ PIM447 no detectado en DTS"
          fi
          
      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: zmk-sofle-firmware
          path: |
            build/left/zephyr/zmk.uf2
            build/right/zephyr/zmk.uf2